TODO:
fix duplicate songs in the song search list
handle messages slow to load in the group list view

helpful commands:
tail applicaiton logs: heroku logs -a song-share-app -t
access heroku postgres db: heroku pg:psql postgresql-regular-65249 --app song-share-app

https://tech.trello.com/why-we-chose-kafka/

https://hackernoon.com/scaling-websockets-9a31497af051

have mobile phone hit webserver on computer on localhost over usb: https://stackoverflow.com/a/53920173/14179842


https://medium.com/@taylorhughes/the-right-way-to-implement-facebook-login-in-a-mobile-app-57e2eca3648b
auth flow:

1) user clicks login w/ spotify
	-this requires client id, which can be stored in the app
	-this will return an auth token

2) user sends request to our server with auth token to get an acesstoken
	- this requires auth token (specific to user), client id and client secret - client secret should live on server
	- this will return an access token, refresh token, and expire time (these things can live on the app)
	- this response also will return jwt to client, which can be used to validate all further requests to our server and ensure that client can only modify the specific user's data (the user associated w/ the auth token that was passed in)

3) every time the spotify access token expires, a call will need to be made to our server to refresh it

4) what if our jwt token expires...? (constantly refresh in the background, or user will have to re-authenticate) (store this in memory) (can use expo secure store: )https://docs.expo.io/versions/latest/sdk/securestore/

5) need to handle expiration of refresh token



db schema: (eventually we can use knex/objection.js for querybuilder/orm)

users: id, spotify id

groups: id, creatorid, playlistid (only creatorid will be able to add song to playlist)

users->groups: list of users->group mapping

messages: id, msg content, groupid

messages->users: list of messages->users mapping

8888
0000
8880
0008
2028
2222
